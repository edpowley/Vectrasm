//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Asm.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


#pragma warning disable CS3021 // Type or member does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="AsmParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public interface IAsmVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="AsmParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProg([NotNull] AsmParser.ProgContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StmtBlank</c>
	/// labeled alternative in <see cref="AsmParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStmtBlank([NotNull] AsmParser.StmtBlankContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StmtEqu</c>
	/// labeled alternative in <see cref="AsmParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStmtEqu([NotNull] AsmParser.StmtEquContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StmtData</c>
	/// labeled alternative in <see cref="AsmParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStmtData([NotNull] AsmParser.StmtDataContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StmtOpcode</c>
	/// labeled alternative in <see cref="AsmParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStmtOpcode([NotNull] AsmParser.StmtOpcodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StmtLabel</c>
	/// labeled alternative in <see cref="AsmParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStmtLabel([NotNull] AsmParser.StmtLabelContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArgumentExtendedOrDirect</c>
	/// labeled alternative in <see cref="AsmParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentExtendedOrDirect([NotNull] AsmParser.ArgumentExtendedOrDirectContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArgumentImmediate</c>
	/// labeled alternative in <see cref="AsmParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentImmediate([NotNull] AsmParser.ArgumentImmediateContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DataByteList</c>
	/// labeled alternative in <see cref="AsmParser.data_byte_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDataByteList([NotNull] AsmParser.DataByteListContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DataByteExpr</c>
	/// labeled alternative in <see cref="AsmParser.data_byte"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDataByteExpr([NotNull] AsmParser.DataByteExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DataByteString</c>
	/// labeled alternative in <see cref="AsmParser.data_byte"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDataByteString([NotNull] AsmParser.DataByteStringContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DataWordList</c>
	/// labeled alternative in <see cref="AsmParser.data_word_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDataWordList([NotNull] AsmParser.DataWordListContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExprParens</c>
	/// labeled alternative in <see cref="AsmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprParens([NotNull] AsmParser.ExprParensContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExprIdentifier</c>
	/// labeled alternative in <see cref="AsmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprIdentifier([NotNull] AsmParser.ExprIdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExprUnaryOp</c>
	/// labeled alternative in <see cref="AsmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprUnaryOp([NotNull] AsmParser.ExprUnaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExprBinOp</c>
	/// labeled alternative in <see cref="AsmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprBinOp([NotNull] AsmParser.ExprBinOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExprLiteral</c>
	/// labeled alternative in <see cref="AsmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprLiteral([NotNull] AsmParser.ExprLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralHex</c>
	/// labeled alternative in <see cref="AsmParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralHex([NotNull] AsmParser.LiteralHexContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralDec</c>
	/// labeled alternative in <see cref="AsmParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralDec([NotNull] AsmParser.LiteralDecContext context);
}
