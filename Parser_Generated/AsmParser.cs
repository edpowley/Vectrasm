//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Asm.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


#pragma warning disable CS3021 // Type or member does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AsmParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, LITERAL_HEX=20, LITERAL_DEC=21, LITERAL_STRING=22, 
		IDENTIFIER=23, MUL_OP=24, ADD_OP=25, NOT_OP=26, NEW_LINE=27, WHITESPACE=28, 
		LINE_COMMENT=29;
	public const int
		RULE_prog = 0, RULE_statement = 1, RULE_argument = 2, RULE_data_byte_list = 3, 
		RULE_data_byte = 4, RULE_data_word_list = 5, RULE_expr = 6, RULE_literal = 7;
	public static readonly string[] ruleNames = {
		"prog", "statement", "argument", "data_byte_list", "data_byte", "data_word_list", 
		"expr", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'EQU'", "'equ'", "'DB'", "'db'", "'FCB'", "'fcb'", "'FCC'", "'fcc'", 
		"'DW'", "'dw'", "'FDB'", "'fdb'", "':'", "'#'", "','", "'('", "')'", "'&&'", 
		"'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "LITERAL_HEX", "LITERAL_DEC", 
		"LITERAL_STRING", "IDENTIFIER", "MUL_OP", "ADD_OP", "NOT_OP", "NEW_LINE", 
		"WHITESPACE", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Asm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AsmParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << IDENTIFIER) | (1L << NEW_LINE))) != 0)) {
				{
				{
				State = 16; statement();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtEquContext : StatementContext {
		public IToken name;
		public ExprContext value;
		public ITerminalNode NEW_LINE() { return GetToken(AsmParser.NEW_LINE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(AsmParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtEquContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterStmtEqu(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitStmtEqu(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtEqu(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtLabelContext : StatementContext {
		public ITerminalNode IDENTIFIER() { return GetToken(AsmParser.IDENTIFIER, 0); }
		public StmtLabelContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterStmtLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitStmtLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtLabel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtBlankContext : StatementContext {
		public ITerminalNode NEW_LINE() { return GetToken(AsmParser.NEW_LINE, 0); }
		public StmtBlankContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterStmtBlank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitStmtBlank(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtBlank(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtOpcodeContext : StatementContext {
		public IToken opcode;
		public ITerminalNode NEW_LINE() { return GetToken(AsmParser.NEW_LINE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(AsmParser.IDENTIFIER, 0); }
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public StmtOpcodeContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterStmtOpcode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitStmtOpcode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtDataContext : StatementContext {
		public Data_byte_listContext db;
		public Data_word_listContext dw;
		public ITerminalNode NEW_LINE() { return GetToken(AsmParser.NEW_LINE, 0); }
		public Data_byte_listContext data_byte_list() {
			return GetRuleContext<Data_byte_listContext>(0);
		}
		public Data_word_listContext data_word_list() {
			return GetRuleContext<Data_word_listContext>(0);
		}
		public StmtDataContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterStmtData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitStmtData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 55;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new StmtBlankContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 22; Match(NEW_LINE);
				}
				break;
			case 2:
				_localctx = new StmtEquContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 23; ((StmtEquContext)_localctx).name = Match(IDENTIFIER);
				State = 24;
				_la = TokenStream.La(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 25; ((StmtEquContext)_localctx).value = expr(0);
				State = 26; Match(NEW_LINE);
				}
				break;
			case 3:
				_localctx = new StmtDataContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 28;
				_la = TokenStream.La(1);
				if ( !(_la==T__2 || _la==T__3) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 29; ((StmtDataContext)_localctx).db = data_byte_list();
				State = 30; Match(NEW_LINE);
				}
				break;
			case 4:
				_localctx = new StmtDataContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 32;
				_la = TokenStream.La(1);
				if ( !(_la==T__4 || _la==T__5) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 33; ((StmtDataContext)_localctx).db = data_byte_list();
				State = 34; Match(NEW_LINE);
				}
				break;
			case 5:
				_localctx = new StmtDataContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 36;
				_la = TokenStream.La(1);
				if ( !(_la==T__6 || _la==T__7) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 37; ((StmtDataContext)_localctx).db = data_byte_list();
				State = 38; Match(NEW_LINE);
				}
				break;
			case 6:
				_localctx = new StmtDataContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 40;
				_la = TokenStream.La(1);
				if ( !(_la==T__8 || _la==T__9) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 41; ((StmtDataContext)_localctx).dw = data_word_list();
				State = 42; Match(NEW_LINE);
				}
				break;
			case 7:
				_localctx = new StmtDataContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 44;
				_la = TokenStream.La(1);
				if ( !(_la==T__10 || _la==T__11) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 45; ((StmtDataContext)_localctx).dw = data_word_list();
				State = 46; Match(NEW_LINE);
				}
				break;
			case 8:
				_localctx = new StmtOpcodeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 48; ((StmtOpcodeContext)_localctx).opcode = Match(IDENTIFIER);
				State = 50;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__15) | (1L << LITERAL_HEX) | (1L << LITERAL_DEC) | (1L << IDENTIFIER) | (1L << ADD_OP) | (1L << NOT_OP))) != 0)) {
					{
					State = 49; argument();
					}
				}

				State = 52; Match(NEW_LINE);
				}
				break;
			case 9:
				_localctx = new StmtLabelContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 53; Match(IDENTIFIER);
				State = 54; Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentImmediateContext : ArgumentContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArgumentImmediateContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterArgumentImmediate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitArgumentImmediate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentImmediate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArgumentExtendedOrDirectContext : ArgumentContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArgumentExtendedOrDirectContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterArgumentExtendedOrDirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitArgumentExtendedOrDirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExtendedOrDirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 4, RULE_argument);
		try {
			State = 60;
			switch (TokenStream.La(1)) {
			case T__15:
			case LITERAL_HEX:
			case LITERAL_DEC:
			case IDENTIFIER:
			case ADD_OP:
			case NOT_OP:
				_localctx = new ArgumentExtendedOrDirectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; expr(0);
				}
				break;
			case T__13:
				_localctx = new ArgumentImmediateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; Match(T__13);
				State = 59; expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_byte_listContext : ParserRuleContext {
		public Data_byte_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_byte_list; } }
	 
		public Data_byte_listContext() { }
		public virtual void CopyFrom(Data_byte_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DataByteListContext : Data_byte_listContext {
		public Data_byteContext[] data_byte() {
			return GetRuleContexts<Data_byteContext>();
		}
		public Data_byteContext data_byte(int i) {
			return GetRuleContext<Data_byteContext>(i);
		}
		public DataByteListContext(Data_byte_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterDataByteList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitDataByteList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataByteList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_byte_listContext data_byte_list() {
		Data_byte_listContext _localctx = new Data_byte_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_data_byte_list);
		int _la;
		try {
			_localctx = new DataByteListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; data_byte();
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__14) {
				{
				{
				State = 63; Match(T__14);
				State = 64; data_byte();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_byteContext : ParserRuleContext {
		public Data_byteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_byte; } }
	 
		public Data_byteContext() { }
		public virtual void CopyFrom(Data_byteContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DataByteExprContext : Data_byteContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DataByteExprContext(Data_byteContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterDataByteExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitDataByteExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataByteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DataByteStringContext : Data_byteContext {
		public ITerminalNode LITERAL_STRING() { return GetToken(AsmParser.LITERAL_STRING, 0); }
		public DataByteStringContext(Data_byteContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterDataByteString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitDataByteString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataByteString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_byteContext data_byte() {
		Data_byteContext _localctx = new Data_byteContext(Context, State);
		EnterRule(_localctx, 8, RULE_data_byte);
		try {
			State = 72;
			switch (TokenStream.La(1)) {
			case T__15:
			case LITERAL_HEX:
			case LITERAL_DEC:
			case IDENTIFIER:
			case ADD_OP:
			case NOT_OP:
				_localctx = new DataByteExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; expr(0);
				}
				break;
			case LITERAL_STRING:
				_localctx = new DataByteStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; Match(LITERAL_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_word_listContext : ParserRuleContext {
		public Data_word_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_word_list; } }
	 
		public Data_word_listContext() { }
		public virtual void CopyFrom(Data_word_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DataWordListContext : Data_word_listContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DataWordListContext(Data_word_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterDataWordList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitDataWordList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataWordList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_word_listContext data_word_list() {
		Data_word_listContext _localctx = new Data_word_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_data_word_list);
		int _la;
		try {
			_localctx = new DataWordListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; expr(0);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__14) {
				{
				{
				State = 75; Match(T__14);
				State = 76; expr(0);
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprParensContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprParensContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterExprParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitExprParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIdentifierContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(AsmParser.IDENTIFIER, 0); }
		public ExprIdentifierContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterExprIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitExprIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprUnaryOpContext : ExprContext {
		public IToken oper;
		public ExprContext rhs;
		public ITerminalNode ADD_OP() { return GetToken(AsmParser.ADD_OP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode NOT_OP() { return GetToken(AsmParser.NOT_OP, 0); }
		public ExprUnaryOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterExprUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitExprUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBinOpContext : ExprContext {
		public ExprContext lhs;
		public IToken oper;
		public ExprContext rhs;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL_OP() { return GetToken(AsmParser.MUL_OP, 0); }
		public ITerminalNode ADD_OP() { return GetToken(AsmParser.ADD_OP, 0); }
		public ExprBinOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterExprBinOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitExprBinOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBinOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLiteralContext : ExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExprLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterExprLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitExprLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			switch (TokenStream.La(1)) {
			case ADD_OP:
				{
				_localctx = new ExprUnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 83; ((ExprUnaryOpContext)_localctx).oper = Match(ADD_OP);
				State = 84; ((ExprUnaryOpContext)_localctx).rhs = expr(8);
				}
				break;
			case NOT_OP:
				{
				_localctx = new ExprUnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85; ((ExprUnaryOpContext)_localctx).oper = Match(NOT_OP);
				State = 86; ((ExprUnaryOpContext)_localctx).rhs = expr(7);
				}
				break;
			case T__15:
				{
				_localctx = new ExprParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87; Match(T__15);
				State = 88; expr(0);
				State = 89; Match(T__16);
				}
				break;
			case LITERAL_HEX:
			case LITERAL_DEC:
				{
				_localctx = new ExprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91; literal();
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new ExprIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 107;
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExprBinOpContext(new ExprContext(_parentctx, _parentState));
						((ExprBinOpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 95;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 96; ((ExprBinOpContext)_localctx).oper = Match(MUL_OP);
						State = 97; ((ExprBinOpContext)_localctx).rhs = expr(7);
						}
						break;
					case 2:
						{
						_localctx = new ExprBinOpContext(new ExprContext(_parentctx, _parentState));
						((ExprBinOpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 98;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 99; ((ExprBinOpContext)_localctx).oper = Match(ADD_OP);
						State = 100; ((ExprBinOpContext)_localctx).rhs = expr(6);
						}
						break;
					case 3:
						{
						_localctx = new ExprBinOpContext(new ExprContext(_parentctx, _parentState));
						((ExprBinOpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 101;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 102; ((ExprBinOpContext)_localctx).oper = Match(T__17);
						State = 103; ((ExprBinOpContext)_localctx).rhs = expr(5);
						}
						break;
					case 4:
						{
						_localctx = new ExprBinOpContext(new ExprContext(_parentctx, _parentState));
						((ExprBinOpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 104;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 105; ((ExprBinOpContext)_localctx).oper = Match(T__18);
						State = 106; ((ExprBinOpContext)_localctx).rhs = expr(4);
						}
						break;
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralDecContext : LiteralContext {
		public ITerminalNode LITERAL_DEC() { return GetToken(AsmParser.LITERAL_DEC, 0); }
		public LiteralDecContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterLiteralDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitLiteralDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralHexContext : LiteralContext {
		public ITerminalNode LITERAL_HEX() { return GetToken(AsmParser.LITERAL_HEX, 0); }
		public LiteralHexContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.EnterLiteralHex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAsmListener typedListener = listener as IAsmListener;
			if (typedListener != null) typedListener.ExitLiteralHex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsmVisitor<TResult> typedVisitor = visitor as IAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralHex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 14, RULE_literal);
		try {
			State = 114;
			switch (TokenStream.La(1)) {
			case LITERAL_HEX:
				_localctx = new LiteralHexContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; Match(LITERAL_HEX);
				}
				break;
			case LITERAL_DEC:
				_localctx = new LiteralDecContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; Match(LITERAL_DEC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1Fw\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x3\x2\a\x2\x14\n\x2\f\x2\xE\x2\x17\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x5\x3\x35\n\x3\x3\x3\x3\x3\x3\x3\x5\x3:\n\x3\x3\x4\x3\x4\x3\x4\x5"+
		"\x4?\n\x4\x3\x5\x3\x5\x3\x5\a\x5\x44\n\x5\f\x5\xE\x5G\v\x5\x3\x6\x3\x6"+
		"\x5\x6K\n\x6\x3\a\x3\a\x3\a\a\aP\n\a\f\a\xE\aS\v\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b`\n\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\bn\n\b\f\b\xE\bq\v\b\x3\t\x3\t\x5"+
		"\tu\n\t\x3\t\x2\x3\xE\n\x2\x4\x6\b\n\f\xE\x10\x2\b\x3\x2\x3\x4\x3\x2\x5"+
		"\x6\x3\x2\a\b\x3\x2\t\n\x3\x2\v\f\x3\x2\r\xE\x85\x2\x15\x3\x2\x2\x2\x4"+
		"\x39\x3\x2\x2\x2\x6>\x3\x2\x2\x2\b@\x3\x2\x2\x2\nJ\x3\x2\x2\x2\fL\x3\x2"+
		"\x2\x2\xE_\x3\x2\x2\x2\x10t\x3\x2\x2\x2\x12\x14\x5\x4\x3\x2\x13\x12\x3"+
		"\x2\x2\x2\x14\x17\x3\x2\x2\x2\x15\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2"+
		"\x16\x3\x3\x2\x2\x2\x17\x15\x3\x2\x2\x2\x18:\a\x1D\x2\x2\x19\x1A\a\x19"+
		"\x2\x2\x1A\x1B\t\x2\x2\x2\x1B\x1C\x5\xE\b\x2\x1C\x1D\a\x1D\x2\x2\x1D:"+
		"\x3\x2\x2\x2\x1E\x1F\t\x3\x2\x2\x1F \x5\b\x5\x2 !\a\x1D\x2\x2!:\x3\x2"+
		"\x2\x2\"#\t\x4\x2\x2#$\x5\b\x5\x2$%\a\x1D\x2\x2%:\x3\x2\x2\x2&\'\t\x5"+
		"\x2\x2\'(\x5\b\x5\x2()\a\x1D\x2\x2):\x3\x2\x2\x2*+\t\x6\x2\x2+,\x5\f\a"+
		"\x2,-\a\x1D\x2\x2-:\x3\x2\x2\x2./\t\a\x2\x2/\x30\x5\f\a\x2\x30\x31\a\x1D"+
		"\x2\x2\x31:\x3\x2\x2\x2\x32\x34\a\x19\x2\x2\x33\x35\x5\x6\x4\x2\x34\x33"+
		"\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36:\a\x1D\x2\x2"+
		"\x37\x38\a\x19\x2\x2\x38:\a\xF\x2\x2\x39\x18\x3\x2\x2\x2\x39\x19\x3\x2"+
		"\x2\x2\x39\x1E\x3\x2\x2\x2\x39\"\x3\x2\x2\x2\x39&\x3\x2\x2\x2\x39*\x3"+
		"\x2\x2\x2\x39.\x3\x2\x2\x2\x39\x32\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2:\x5"+
		"\x3\x2\x2\x2;?\x5\xE\b\x2<=\a\x10\x2\x2=?\x5\xE\b\x2>;\x3\x2\x2\x2><\x3"+
		"\x2\x2\x2?\a\x3\x2\x2\x2@\x45\x5\n\x6\x2\x41\x42\a\x11\x2\x2\x42\x44\x5"+
		"\n\x6\x2\x43\x41\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45"+
		"\x46\x3\x2\x2\x2\x46\t\x3\x2\x2\x2G\x45\x3\x2\x2\x2HK\x5\xE\b\x2IK\a\x18"+
		"\x2\x2JH\x3\x2\x2\x2JI\x3\x2\x2\x2K\v\x3\x2\x2\x2LQ\x5\xE\b\x2MN\a\x11"+
		"\x2\x2NP\x5\xE\b\x2OM\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2"+
		"\x2\x2R\r\x3\x2\x2\x2SQ\x3\x2\x2\x2TU\b\b\x1\x2UV\a\x1B\x2\x2V`\x5\xE"+
		"\b\nWX\a\x1C\x2\x2X`\x5\xE\b\tYZ\a\x12\x2\x2Z[\x5\xE\b\x2[\\\a\x13\x2"+
		"\x2\\`\x3\x2\x2\x2]`\x5\x10\t\x2^`\a\x19\x2\x2_T\x3\x2\x2\x2_W\x3\x2\x2"+
		"\x2_Y\x3\x2\x2\x2_]\x3\x2\x2\x2_^\x3\x2\x2\x2`o\x3\x2\x2\x2\x61\x62\f"+
		"\b\x2\x2\x62\x63\a\x1A\x2\x2\x63n\x5\xE\b\t\x64\x65\f\a\x2\x2\x65\x66"+
		"\a\x1B\x2\x2\x66n\x5\xE\b\bgh\f\x6\x2\x2hi\a\x14\x2\x2in\x5\xE\b\ajk\f"+
		"\x5\x2\x2kl\a\x15\x2\x2ln\x5\xE\b\x6m\x61\x3\x2\x2\x2m\x64\x3\x2\x2\x2"+
		"mg\x3\x2\x2\x2mj\x3\x2\x2\x2nq\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2\x2\x2"+
		"p\xF\x3\x2\x2\x2qo\x3\x2\x2\x2ru\a\x16\x2\x2su\a\x17\x2\x2tr\x3\x2\x2"+
		"\x2ts\x3\x2\x2\x2u\x11\x3\x2\x2\x2\r\x15\x34\x39>\x45JQ_mot";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
